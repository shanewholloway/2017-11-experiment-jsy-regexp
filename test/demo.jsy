const {promisify} = require('util')
const fs = require('fs')
const readFile = promisify @ fs.readFile
const writeFile = promisify @ fs.writeFile

//const offside_scanner = require('../dist/offside_scanner')
//const bind_basic_scanner = require('../dist/basic_scanner')
//const jsScanner = bind_basic_scanner @ bind_basic_scanner.javascript_scanners
const bind_jsy_scanner = require('../dist/jsy_scanner')
const jsyScanner = bind_jsy_scanner()

const pretty_ln = ln => ::
  const i = null == ln.indent ? ' -'
    : (ln.indent.length+'').padStart(2)
  const line_no = (ln.idx+'').padStart(4)

  return ln.content
      ? `${line_no}|${i}| ${ln.content}`
      : `${line_no}|${i}|`

function xform_repr(lines) ::
  return lines.map @ pretty_ln

function xform_raw(lines) ::
  return lines.map @ ln => ln.content || ''

function xform_blocks(lines) ::
  return lines
    .filter @ ln => ln.isBlockStart()
    .map @ ln => ln.blockSlice().map(pretty_ln)
      


function dbg() ::

if 1 ::
  dbg @ 'a crazy self-referencing example', /* tail
    readFile(`${basedir}/parser.js`, 'utf-8')
        blah blah */

  const filename = process.argv.slice(-1).pop()
  readFile(filename, 'utf-8')
  //.then @ offside_scanner
  //.then @ lines => lines.slice(0,18)
  .then @ content =>
    jsyScanner @ content, @{} file: `${filename}.js`, source: filename
  //.then @ xform_repr
  //.then @ res => :: console.dir @ res, @{} colors: true, depth: null
  .then @ res => ::
    if 0 ::
      for const ln of res ::
        if null == ln.ops :: continue
        const idx = ln.ops.findIndex @ e => e.op.startsWith('comment')
        if idx >= 0 ::
          console.log()
          console.dir @ ln, @{} colors: true

    const src = 
      res.map @ ln => ln.t_content
      .join @ '\n'
    return `${src}\n${res.src_map.toComment()}\n`
    
  .then @ js_content =>
    writeFile @
      filename+'.out.js',
      js_content || '',
      'utf-8',

else ::
  const lines = offside_scanner @ '  \n'
  console.dir @ lines, @{} colors: true
