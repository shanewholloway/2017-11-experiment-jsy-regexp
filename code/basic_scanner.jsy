export default bindBasicScanner
function bindBasicScanner(scannerList) ::
  if null == scannerList ::
    scannerList = bindBasicScanner.javascript_scanners

  const rx_scanner = new RegExp @
    scannerList
      .map @ e => `(?:${e.rx_open.source}${e.rx_close.source})`
      .join('|')
    'g'

  const scn_multiline={}, scn_ops={}

  for const each of scannerList ::
    scn_ops[each.kind] = each.op
    if true === each.multiline ::
      scn_multiline[each.op] = bindMultilineScanFor @ each

    else if 'function' === typeof each.multiline ::
      scn_multiline[each.op] = each.multiline.bind(each)

  return basicScanner

  function basicScanner(offside_lines) ::
    let continue_scan
    for const ln of offside_lines ::
      if ln.blank :: continue

      let {content} = ln, ops=ln.ops=[], col=0
      if undefined !== continue_scan ::
        continue_scan = continue_scan(ln)
        if undefined !== continue_scan ::
          continue

        if ops.length ::
          const tail = ops[ops.length-1]
          col = tail.c1
          content = ' '.repeat(col) + content.slice(col)

      content.replace @ rx_scanner, (match, ...pairs) => ::
        pairs.pop() // content
        const pos = pairs.pop()

        pairs = pairs.filter(not_undefined)
        if col < pos ::
          ops.push @: op: 'src', c0: col, c1:pos, sz: content.slice(col, pos)

        col = pos + match.length

        const op = scn_ops[pairs[0]]
        ops.push @: op, c0:pos, c1:col, sz: content.slice(pos, col)

        continue_scan = ! pairs[1] ? scn_multiline[op] : undefined

      if continue_scan ::
        ops[ops.length-1].cont = true
      if col < content.length ::
        ops.push @: op: 'src', c0: col, c1:content.length, sz: content.slice(col)

    return offside_lines


function not_undefined(e) ::
  return undefined !== e

function bindMultilineScanFor(scanner) ::
  const rx_cont = new RegExp @ '^' + scanner.rx_close.source
  return scan

  function scan(ln) ::
    const {content, ops} = ln
    const m = rx_cont.exec(content)
    if undefined === m ::
      throw new SyntaxError @ `Invalid multiline scan`

    ln.ops.push @: op: scanner.op, c0: 0, c1: m[0].length, sz: m[0]
    return m[1]
      ? undefined // found multi-line ending
      : scan // multi-line ending not found; continue scanning


bindBasicScanner.javascript_scanners = @[]
  @{} op: 'comment_eol', kind:'//', rx_open: /(\/\/)/, rx_close: /.*($)/
  @{} op: 'comment_multi', kind:'/*', rx_open: /(\/\*)/, rx_close: /.*?(\*\/|$)/
      multiline: true
  @{} op: 'str_single', kind:"'", rx_open: /(')/, rx_close: /(?:\\.|[^'])*('|$)/
      multiline(ln) :: throw new SyntaxError @ `Newline in single quote string (line ${pos.idx})`
  @{} op: 'str_double', kind:'"', rx_open: /(")/, rx_close: /(?:\\.|[^"])*("|$)/
      multiline(ln) :: throw new SyntaxError @ `Newline in single quote string (line ${pos.idx})`
  @{} op: 'str_multi', kind:'`', rx_open: /(`)/, rx_close: /(?:\\.|[^`])*(`|$)/
      multiline: true

